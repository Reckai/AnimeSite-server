generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  name          String?
  currentAvatar Image?      @relation("UserAvatar", fields: [avatarId], references: [id])
  avatarId      String?     @unique
  images        Image[]     @relation("UserImages")
  role          Role        @default(USER)
  password      String?
  emailVerified DateTime?
  createdAt     DateTime    @default(now())
  Comment       Comment[]
  AnimeList     AnimeList[]
  Account       Account[]
  likes         Like[]
}

model Image {
  id           String    @id @default(uuid())
  filename     String
  originalName String
  path         String
  mimeType     String
  size         Int
  width        Int?
  height       Int?
  type         ImageType
  url          String
  thumbnailUrl String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation("UserImages", fields: [userId], references: [id])
  avatarUser   User?     @relation("UserAvatar")
  blurhash     String?

  @@index([userId])
}

enum ImageType {
  AVATAR
  COVER
  GENERAL
}

// Assuming you have a User model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Comment {
  id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parentId  String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  anime     Anime     @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId   String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  likes     Like[]
}

model Like {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

model AnimeList {
  id      String      @id @default(uuid())
  status  AnimeStatus
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  anime   Anime       @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId String
}

enum AnimeStatus {
  WATCHING
  COMPLETED
  DELAYED
  DROPPED
  PLANNED
}

model Anime {
  id            String      @id @default(uuid())
  name          String?
  licenseNameRu String?
  description   String?
  genres        Genre[]
  slug          String      @unique
  studios       Studio[]
  poster        Poster[]
  animeLists    AnimeList[]
  comments      Comment[]
}

model Studio {
  id    String  @id @default(uuid())
  name  String?
  Anime Anime[]
}

model Genre {
  id      String  @id @default(uuid())
  name    String?
  russian String?
  Anime   Anime[]
}

model Poster {
  id          String  @id @default(uuid())
  originalUrl String
  previewUrl  String
  Anime       Anime[]
}

enum Role {
  USER
  ADMIN
}

enum AnimeKindEnum {
  tv

  movie

  ova

  ona

  special

  tv_special

  music

  pv

  cm
}
