generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  name          String?
  image         String?
  role          Role        @default(USER)
  password      String?
  refreshToken  Session[]
  emailVerified DateTime?
  createdAt     DateTime    @default(now())
  Comment       Comment[]
  Reply         Reply[]
  AnimeList     AnimeList[]
  Account       Account[]
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Comment {
  id              String   @id @default(uuid())
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  depth           Int
  parentId        String?
  replies         Reply[]
  threadId        String?
  viewerCanDelete Boolean
  viewerCanUpdate Boolean
  author          User[]
}

model Reply {
  id              String    @id @default(uuid())
  content         String
  author          User[]
  depth           Int
  parentId        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  viewerCanDelete Boolean
  viewerCanUpdate Boolean
  threadId        String?
  Comment         Comment[]
}

model AnimeList {
  id     String      @id @default(uuid())
  status AnimeStatus
  user   User[]
  anime  Anime[]
}

enum AnimeStatus {
  WATCHING
  COMPLETED
  DELAYED
  DROPPED
  PLANNED
}

model Anime {
  id            String      @id @default(uuid())
  name          String?
  licenseNameRu String?
  description   String?
  genres        Genre[]
  slug          String      @unique
  studios       Studio[]
  poster        Poster[]
  animeLists    AnimeList[]
}

model Studio {
  id    String  @id @default(uuid())
  name  String?
  Anime Anime[]
}

model Genre {
  id      String  @id @default(uuid())
  name    String?
  russian String?
  Anime   Anime[]
}

model Poster {
  id          String  @id @default(uuid())
  originalUrl String
  previewUrl  String
  Anime       Anime[]
}

enum Role {
  USER
  ADMIN
}

enum AnimeKindEnum {
  tv

  movie

  ova

  ona

  special

  tv_special

  music

  pv

  cm
}
